#pragma once
#ifndef Node_H
#define Node_H
#include <string>
#include <vector>
using namespace std;

class NODE{
public:
	string name(void){
		return this->nodeName;
	}
	void name(string name){
		this->nodeName = name;
	}
	int number(void){
		return this->nodeNumber;
	}
	void number(int num){
		this->nodeNumber = num;
	}
	vector<int> linenumber(void){
		return this->lineNumber;
	}
	void linenumber(vector<int> num){
		if (num.size() <= 2)
			this->lineNumber = num;
	}
	int flow(void){
		return this->nodeFlow;
	}
	void flow(int num){
		this->nodeFlow = num;
	}
	double degree(void){
		return this->nodeDegree;
	}
	void degree(double num){
		this->nodeDegree = num;
	}
	double betweenness(void){
		return this->nodeBetweenness;
	}
	void betweenness(double num){
		this->nodeBetweenness = num;
	}
	double vulnerability(void){
		return this->nodeVulnerability;
	}
	void vulnerability(double num){
		this->nodeVulnerability = num;
	}
public:
	NODE(void){
		nodeNumber = 0;
		initNODE();
	}
	NODE(int n){
		number(n);
		initNODE();
	}
	~NODE(){}
private:
	void initNODE(void){
		lineNumber.clear();
		nodeDegree = 0;
		nodeBetweenness = 0;
		nodeFlow = 0;
		nodeVulnerability = 0;
	}
private:
	int nodeNumber;	//节点号
	string nodeName;	//节点名称
	vector<int> lineNumber;	//线路号
	double nodeDegree;	//度
	double nodeBetweenness;		//介数
	int nodeFlow;	//客流
	double nodeVulnerability;		//脆弱值
};

class LINE{
public:
	void linenode(vector<NODE> num){
		if (num.size() == 2){
			lineNode = num;
		}
	}
	vector<NODE> linenode(void){
		return lineNode;
	}
	void linelen(double num){
		lineLen = num;
	}
	double linelen(void){
		return lineLen;
	}
private:
	vector<NODE> lineNode;	//节点
	double lineLen;
	bool lineStatue = true;
};

class AREA{
public:
	bool isNode(NODE node){
		bool sign = false;
		size_t i = 0;
		for (; i < areaNode.size(); ++i){
			if (areaNode[i].number() == node.number()){
				sign = true;
				break;
			}
		}
		return sign;
	}
	void insert(NODE node){
		areaNode.push_back(node);
	}
	void insert(LINE line){
		areaLine.push_back(line);
	}
	size_t nodeSize(void){
		return areaNode.size();
	}
	size_t lineSize(void){
		return areaLine.size();
	}
	vector<NODE> node(){
		return areaNode;
	}
	vector<LINE> line(){
		return areaLine;
	}
public:
	double q(void){
		return this->Q;
	}
	void q(double qq){
		Q = qq;
	}
	long double vulnerability(void){
		areaVulnerability = 0;
		for (size_t i = 0; i < this->nodeSize(); ++i){
			areaVulnerability += areaNode[i].vulnerability();
		}
		areaVulnerability = areaVulnerability / nodeSize();
		return this->areaVulnerability;
	}
	void vulnerability(long double num){
		this->areaVulnerability = num;
	}
	double betweenness(void){
		return this->areaBetweenness;
	}
	void betweenness(double num){
		this->areaBetweenness = num;
	}
	int number(void){
		return this->areaNumber;
	}
	void number(int num){
		this->areaNumber = num;
	}
	int flow(void){
		return this->areaFlow;
	}
	void flow(int num){
		this->areaFlow = num;
	}
public:
	AREA(void) :areaNumber(0), areaBetweenness(0), areaFlow(0), areaVulnerability(0), Q(0){};
	~AREA(){}

private:
	double Q;
private:
	vector<NODE> areaNode;//区域节点集
	vector<LINE> areaLine;//区域线集
	int areaNumber;	//区域号
	double areaBetweenness;		//区域介数
	int areaFlow;	//区域客流
	double areaVulnerability;		//区域脆弱值
};

#endif